let { newCommand } = require('../events');
let WhatsAlexa = require('../events');
let Config = require('../config');
let fs = require('fs');
let {MessageType} = require('@adiwajshing/baileys');
let Language = require('../language');
let Lang = Language.getString('list');
let td = Config.WORKTYPE == 'public' ? false : true

var LOADING = ''
var warning = ''
var anti_link = ''
var auto_bio = ''
var language = ''
var MSG = ''
var FMSG = ''
if (Config.ANTILINK == 'true') anti_link = 'On'
if (Config.ANTILINK == 'false') anti_link = 'Off'
if (Config.AUTOBIO == 'true') auto_bio = 'On'
if (Config.AUTOBIO == 'false') auto_bio = 'Off'
if (Config.LANG == 'EN') warning = 'We are not responsible for any consequences that may arise from use or misuse of Bot, You are responsible for all consequences also the responsibility of sharing Images, Videos, Stickers, Audios etc.. are yours!', language = 'English', FMSG = 'Have a Nice Day üíñ\n\n```Git:``` *'+Config.GIT+'*\n\n```Thank You For using WhatsAlexa üíï```\n*¬© WhatsAlexa, Made By Toxic Devil*\n\n*‚óÑ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¶Å‚¶Å‚óØ‚¶Å‚¶Å‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ñ∫*\n   *‚¶Å‚óä‚ïê‚¶Å Whats üë∏ Alexa ‚¶Å‚ïê‚óä‚¶Å*\n*‚óÑ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¶Å‚¶Å‚óØ‚¶Å‚¶Å‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ñ∫*',  MSG = '*‚óÑ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¶Å‚¶Å‚óØ‚¶Å‚¶Å‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ñ∫*\n   *‚¶Å‚óä‚ïê‚¶Å Whats üë∏ Alexa ‚¶Å‚ïê‚óä‚¶Å*\n*‚óÑ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¶Å‚¶Å‚óØ‚¶Å‚¶Å‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ñ∫*\n\nHi user,\n*'+warning+'*\n\n*‚óÜ BOT INFO ‚óÜ*\n\n```‚ñ£ Developer:``` *TOXIC DEVIL*\n```‚ñ£ Owner:``` *'+Config.OWNER+'*\n```‚ñ£ Contact Owner:``` *wa.me/'+Config.OWNERNUM+'*\n```‚ñ£ Version:``` *'+Config.VERSION+'*\n```‚ñ£ Branch:``` *'+Config.BRANCH+'*\n```‚ñ£ Language:``` *'+language+'*\n```‚ñ£ Auto Bio:``` *'+auto_bio+'*\n```‚ñ£ Antilink:``` *'+anti_link+'*\n```‚ñ£ Work Type:``` *'+Config.WORKTYPE+'*\n\n‚àé ‚áì *Commands* ‚áì ‚àé\n\n'
if (Config.LANG == 'ML') warning = '‡¥¨‡µã‡¥ü‡µç‡¥ü‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥®‡¥ø‡¥®‡µç‡¥®‡µã ‡¥¶‡µÅ‡¥∞‡µÅ‡¥™‡¥Ø‡µã‡¥ó‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥®‡¥ø‡¥®‡µç‡¥®‡µã ‡¥â‡¥£‡µç‡¥ü‡¥æ‡¥ï‡µÅ‡¥®‡µç‡¥® ‡¥Ö‡¥®‡¥®‡µç‡¥§‡¥∞‡¥´‡¥≤‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥û‡¥ô‡µç‡¥ô‡µæ ‡¥â‡¥§‡µç‡¥§‡¥∞‡¥µ‡¥æ‡¥¶‡¥ø‡¥ï‡¥≥‡¥≤‡µç‡¥≤, ‡¥ö‡¥ø‡¥§‡µç‡¥∞‡¥ô‡µç‡¥ô‡µæ, ‡¥µ‡µÄ‡¥°‡¥ø‡¥Ø‡µã‡¥ï‡µæ, ‡¥∏‡µç‡¥±‡µç‡¥±‡¥ø‡¥ï‡µç‡¥ï‡¥±‡µÅ‡¥ï‡µæ, ‡¥ì‡¥°‡¥ø‡¥Ø‡µã‡¥ï‡µæ ‡¥Æ‡µÅ‡¥§‡¥≤‡¥æ‡¥Ø‡¥µ ‡¥™‡¥ô‡µç‡¥ï‡¥ø‡¥ü‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥â‡¥§‡µç‡¥§‡¥∞‡¥µ‡¥æ‡¥¶‡¥ø‡¥§‡µç‡¥§‡¥µ‡µÅ‡¥Ç ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡¥æ‡¥£‡µç.', language = '‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç', FMSG = '‡¥í‡¥∞‡µÅ ‡¥®‡¥≤‡µç‡¥≤ ‡¥¶‡¥ø‡¥®‡¥Ç ‡¥Ü‡¥∂‡¥Ç‡¥∏‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ üíñ\n\n```‡¥ó‡¥ø‡¥±‡µç‡¥±‡µç:``` *'+Config.GIT+'*\n\n```WhatsAlexa ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡¥§‡¥ø‡¥®‡µç ‡¥®‡¥®‡µç‡¥¶‡¥ø üíï```\n*¬© WhatsAlexa, ‡¥â‡¥£‡µç‡¥ü‡¥æ‡¥ï‡µç‡¥ï‡¥ø‡¥Ø‡¥§‡µç Toxic Devil*\n\n*‚óÑ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¶Å‚¶Å‚óØ‚¶Å‚¶Å‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ñ∫*\n   *‚¶Å‚óä‚ïê‚¶Å Whats üë∏ Alexa ‚¶Å‚ïê‚óä‚¶Å*\n*‚óÑ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¶Å‚¶Å‚óØ‚¶Å‚¶Å‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ñ∫*', MSG = '*‚óÑ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¶Å‚¶Å‚óØ‚¶Å‚¶Å‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ñ∫*\n   *‚¶Å‚óä‚ïê‚¶Å Whats üë∏ Alexa ‚¶Å‚ïê‚óä‚¶Å*\n*‚óÑ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¶Å‚¶Å‚óØ‚¶Å‚¶Å‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ñ∫*\n\n‡¥®‡¥Æ‡¥∏‡µç‡¥ï‡¥æ‡¥∞‡¥Ç user,\n*'+warning+'*\n\n*‚óÜ ‡¥¨‡µã‡¥ü‡µç‡¥ü‡µç ‡¥µ‡¥ø‡¥µ‡¥∞‡¥Ç ‚óÜ*\n\n```‚ñ£ ‡¥°‡µÜ‡¥µ‡¥≤‡¥™‡µç‡¥™‡µº:``` *TOXIC DEVIL*\n```‚ñ£ ‡¥â‡¥ü‡¥Æ:``` *'+Config.OWNER+'*\n```‚ñ£ ‡¥â‡¥ü‡¥Æ‡¥Ø‡µÅ‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥¨‡¥®‡µç‡¥ß‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥ï:``` *wa.me/'+Config.OWNERNUM+'*\n```‚ñ£ Version:``` *'+Config.VERSION+'*\n```‚ñ£ Branch:``` *'+Config.BRANCH+'*\n```‚ñ£ ‡¥≠‡¥æ‡¥∑:``` *'+language+'*\n```‚ñ£ ‡¥ì‡¥ü‡µç‡¥ü‡µã ‡¥¨‡¥Ø‡µã:``` *'+auto_bio+'*\n```‚ñ£ ‡¥Ü‡¥®‡µç‡¥±‡¥ø ‡¥≤‡¥ø‡¥ô‡µç‡¥ï‡µç:``` *'+anti_link+'*\n```‚ñ£ ‡¥µ‡¥∞‡µç‚Äç‡¥ï‡µç‡¥ï‡µç‚Äå ‡¥§‡¥∞‡¥Ç:``` *'+Config.WORKTYPE+'*\n\n‚àé ‚áì *‡¥ï‡¥Æ‡¥æ‡µª‡¥°‡µÅ‡¥ï‡µæ* ‚áì ‚àé\n\n'
if (Config.LANG == 'ID') warning = 'Kami tidak bertanggung jawab atas segala akibat yang mungkin timbul dari penggunaan atau penyalahgunaan Bot, Anda bertanggung jawab atas semua konsekuensi juga tanggung jawab berbagi Gambar, Video, Stiker, Audio dll. adalah milik Anda!', language = 'Indonasian', FMSG = 'Semoga harimu menyenangkan üíñ\n\n```Git:``` *'+Config.GIT+'*\n\n```Terima kasih telah menggunakan WhatsAlexa üíï```\n*¬© WhatsAlexa, Dibuat oleh Toxic Devil*\n\n*‚óÑ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¶Å‚¶Å‚óØ‚¶Å‚¶Å‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ñ∫*\n   *‚¶Å‚óä‚ïê‚¶Å Whats üë∏ Alexa ‚¶Å‚ïê‚óä‚¶Å*\n*‚óÑ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¶Å‚¶Å‚óØ‚¶Å‚¶Å‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ñ∫*', MSG = '*‚óÑ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¶Å‚¶Å‚óØ‚¶Å‚¶Å‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ñ∫*\n   *‚¶Å‚óä‚ïê‚¶Å Whats üë∏ Alexa ‚¶Å‚ïê‚óä‚¶Å*\n*‚óÑ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¶Å‚¶Å‚óØ‚¶Å‚¶Å‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ñ∫*\n\nHai user,\n*'+warning+'*\n\n*‚óÜ INFORMASI BOT ‚óÜ*\n\n```‚ñ£ Pengembang:``` *TOXIC DEVIL*\n```‚ñ£ Pemilik:``` *'+Config.OWNER+'*\n```‚ñ£ Version:``` *'+Config.VERSION+'*\n```‚ñ£ Branch:``` *'+Config.BRANCH+'*\n```‚ñ£ Hubungi Pemilik:``` *wa.me/'+Config.OWNERNUM+'*\n```‚ñ£ Bahasa:``` *'+language+'*\n```‚ñ£ Bio otomatis:``` *'+auto_bio+'*\n```‚ñ£ Anti Tautan:``` *'+anti_link+'*\n```‚ñ£ Jenis Pekerjaan:``` *'+Config.WORKTYPE+'*\n\n‚àé ‚áì *Perintah* ‚áì ‚àé\n\n'

    newCommand(
             {cmd: 'list ?(.*)',
              fromMe: td,
              dontAddCommandList: true},
              (async (message, match) => {
       
        var CMD_HELP = '';
        if (match[1] === '') {
            WhatsAlexa.commands.map(
                async (command) =>  {
                    if (command.dontAddCommandList || command.cmd === undefined) return;
                    try {
                        var match = command.cmd.toString().match(/(\W*)([A-Za-zƒü√º≈üi√∂√ß1234567890]*)/);
                    } catch {
                        var match = [command.cmd];
                    }
    
                    var HANDLER = '';
    
                    if (/\[(\W*)\]/.test(Config.HANDLERS)) {
                        HANDLER = Config.HANDLERS.match(/\[(\W*)\]/)[1][0];
                    } else {
                        HANDLER = '.';
                    }
                    CMD_HELP += '*üéØ ' + Lang.COMMAND + ':* ```' + (match.length >= 3 ? (HANDLER + match[2]) : command.pattern) + (command.desc === '' ? '```\n\n' : '```\n');
                    if (command.desc !== '') CMD_HELP += '*üìù ' + Lang.DESC + ':* ```' + command.desc + (command.warn === '' ? '```\n\n' : '```\n');
                    if (command.usage !== '') CMD_HELP += '*‚å®Ô∏è ' + Lang.EXAMPLE + ':* ```' + command.usage + '```\n\n';
                    if (command.warn !== '') CMD_HELP += '*‚ö†Ô∏è ' + Lang.WARN + ':* ```' + command.warn + '```\n\n';

                }
            );
            
          await message.client.sendMessage(
                message.jid, MSG + CMD_HELP + FMSG, MessageType.text, {contextInfo: { forwardingScore: 49, isForwarded: true }, quoted: message.data});
        } else {

            var CMD_HELP = '';
            WhatsAlexa.commands.map(
                async (command) =>  {
                    if (command.dontAddCommandList || command.cmd === undefined) return;
                    try {
                        var cmatch = command.pattern.toString().match(/(\W*)([A-Za-zƒü√º≈üi√∂√ß1234567890]*)/);
                    } catch {
                        var cmatch = [command.cmd];
                    }
                
                    if (cmatch[2] == match[1]) {
                        var HANDLER = '';
    
                        if (/\[(\W*)\]/.test(Config.HANDLERS)) {
                            HANDLER = Config.HANDLERS.match(/\[(\W*)\]/)[1][0];
                        } else {
                            HANDLER = '.';
                        }
                        CMD_HELP += '*üéØ ' + Lang.COMMAND + ':* ```' + (cmatch.length >= 3 ? (HANDLER + cmatch[2]) : command.pattern) + (command.desc === '' ? '```\n\n' : '```\n');
                        if (command.desc !== '') CMD_HELP += '*üìù ' + Lang.DESC + ':* ```' + command.desc + (command.warn === '' ? '```\n\n' : '```\n');
                        if (command.usage !== '') CMD_HELP += '*‚å®Ô∏è ' + Lang.EXAMPLE + ':* ```' + command.usage + '```\n\n';
                        if (command.warn !== '') CMD_HELP += '*‚ö†Ô∏è ' + Lang.WARN + ':* ```' + command.warn + '```\n\n';

                    }
                }
            );
            if (CMD_HELP === '') CMD_HELP += Lang.NOT_FOUND;            
            await message.client.sendMessage(
                message.jid, MSG + CMD_HELP + FMSG, MessageType.text, {contextInfo: { forwardingScore: 49, isForwarded: true }, quoted: message.data});
        }
    }));

    newCommand(
             {cmd: 'menu ?(.*)',
              fromMe: td,
              dontAddCommandList: true},
              (async (message, match) => {

        var CMD_HELP = '';
        if (match[1] === '') {
            WhatsAlexa.commands.map(
                async (command) =>  {
                    if (command.dontAddCommandList || command.cmd === undefined) return;
                    try {
                        var match = command.cmd.toString().match(/(\W*)([A-Za-zƒü√º≈üi√∂√ß1234567890]*)/);
                    } catch {
                        var match = [command.cmd];
                    }
    
                    var HANDLER = '';
    
                    if (/\[(\W*)\]/.test(Config.HANDLERS)) {
                        HANDLER = Config.HANDLERS.match(/\[(\W*)\]/)[1][0];
                    } else {
                        HANDLER = '.';
                    }
                    CMD_HELP += '*üéØ ' + Lang.COMMAND + ':* ```' + (match.length >= 3 ? (HANDLER + match[2]) : command.pattern) + (command.desc === '' ? '```\n\n' : '```\n');
                    if (command.desc !== '') CMD_HELP += '*üìù ' + Lang.DESC + ':* ```' + command.desc + (command.warn === '' ? '```\n\n' : '```\n');
                    if (command.usage !== '') CMD_HELP += '*‚å®Ô∏è ' + Lang.EXAMPLE + ':* ```' + command.usage + '```\n\n';
                    if (command.warn !== '') CMD_HELP += '*‚ö†Ô∏è ' + Lang.WARN + ':* ```' + command.warn + '```\n\n';

                }
            );
            
          await message.client.sendMessage(
                message.jid, MSG + CMD_HELP + FMSG, MessageType.text, {contextInfo: { forwardingScore: 49, isForwarded: true }, quoted: message.data});
        } else {

            var CMD_HELP = '';
            WhatsAlexa.commands.map(
                async (command) =>  {
                    if (command.dontAddCommandList || command.cmd === undefined) return;
                    try {
                        var cmatch = command.pattern.toString().match(/(\W*)([A-Za-zƒü√º≈üi√∂√ß1234567890]*)/);
                    } catch {
                        var cmatch = [command.cmd];
                    }
                
                    if (cmatch[2] == match[1]) {
                        var HANDLER = '';
    
                        if (/\[(\W*)\]/.test(Config.HANDLERS)) {
                            HANDLER = Config.HANDLERS.match(/\[(\W*)\]/)[1][0];
                        } else {
                            HANDLER = '.';
                        }
                        CMD_HELP += '*üéØ ' + Lang.COMMAND + ':* ```' + (cmatch.length >= 3 ? (HANDLER + cmatch[2]) : command.pattern) + (command.desc === '' ? '```\n\n' : '```\n');
                        if (command.desc !== '') CMD_HELP += '*üìù ' + Lang.DESC + ':* ```' + command.desc + (command.warn === '' ? '```\n\n' : '```\n');
                        if (command.usage !== '') CMD_HELP += '*‚å®Ô∏è ' + Lang.EXAMPLE + ':* ```' + command.usage + '```\n\n';
                        if (command.warn !== '') CMD_HELP += '*‚ö†Ô∏è ' + Lang.WARN + ':* ```' + command.warn + '```\n\n';

                    }
                }
            );
            if (CMD_HELP === '') CMD_HELP += Lang.NOT_FOUND;            
            await message.client.sendMessage(
                message.jid, MSG + CMD_HELP + FMSG, MessageType.text, {contextInfo: { forwardingScore: 49, isForwarded: true }, quoted: message.data});
        }
    }));

    newCommand(
             {cmd: 'help ?(.*)',
              fromMe: td,
              dontAddCommandList: true},
              (async (message, match) => {

        var CMD_HELP = '';
        if (match[1] === '') {
            WhatsAlexa.commands.map(
                async (command) =>  {
                    if (command.dontAddCommandList || command.cmd === undefined) return;
                    try {
                        var match = command.cmd.toString().match(/(\W*)([A-Za-zƒü√º≈üi√∂√ß1234567890]*)/);
                    } catch {
                        var match = [command.cmd];
                    }
    
                    var HANDLER = '';
    
                    if (/\[(\W*)\]/.test(Config.HANDLERS)) {
                        HANDLER = Config.HANDLERS.match(/\[(\W*)\]/)[1][0];
                    } else {
                        HANDLER = '.';
                    }
                    CMD_HELP += '*üéØ ' + Lang.COMMAND + ':* ```' + (match.length >= 3 ? (HANDLER + match[2]) : command.pattern) + (command.desc === '' ? '```\n\n' : '```\n');
                    if (command.desc !== '') CMD_HELP += '*üìù ' + Lang.DESC + ':* ```' + command.desc + (command.warn === '' ? '```\n\n' : '```\n');
                    if (command.usage !== '') CMD_HELP += '*‚å®Ô∏è ' + Lang.EXAMPLE + ':* ```' + command.usage + '```\n\n';
                    if (command.warn !== '') CMD_HELP += '*‚ö†Ô∏è ' + Lang.WARN + ':* ```' + command.warn + '```\n\n';

                }
            );
            
          await message.client.sendMessage(
                message.jid, MSG + CMD_HELP + FMSG, MessageType.text, {contextInfo: { forwardingScore: 49, isForwarded: true }, quoted: message.data});
        } else {

            var CMD_HELP = '';
            WhatsAlexa.commands.map(
                async (command) =>  {
                    if (command.dontAddCommandList || command.cmd === undefined) return;
                    try {
                        var cmatch = command.pattern.toString().match(/(\W*)([A-Za-zƒü√º≈üi√∂√ß1234567890]*)/);
                    } catch {
                        var cmatch = [command.cmd];
                    }
                
                    if (cmatch[2] == match[1]) {
                        var HANDLER = '';
    
                        if (/\[(\W*)\]/.test(Config.HANDLERS)) {
                            HANDLER = Config.HANDLERS.match(/\[(\W*)\]/)[1][0];
                        } else {
                            HANDLER = '.';
                        }
                        CMD_HELP += '*üéØ ' + Lang.COMMAND + ':* ```' + (cmatch.length >= 3 ? (HANDLER + cmatch[2]) : command.pattern) + (command.desc === '' ? '```\n\n' : '```\n');
                        if (command.desc !== '') CMD_HELP += '*üìù ' + Lang.DESC + ':* ```' + command.desc + (command.warn === '' ? '```\n\n' : '```\n');
                        if (command.usage !== '') CMD_HELP += '*‚å®Ô∏è ' + Lang.EXAMPLE + ':* ```' + command.usage + '```\n\n';
                        if (command.warn !== '') CMD_HELP += '*‚ö†Ô∏è ' + Lang.WARN + ':* ```' + command.warn + '```\n\n';

                    }
                }
            );
            if (CMD_HELP === '') CMD_HELP += Lang.NOT_FOUND;            
            await message.client.sendMessage(
                message.jid, MSG + CMD_HELP + FMSG, MessageType.text, {contextInfo: { forwardingScore: 49, isForwarded: true }, quoted: message.data});
        }
    }));

    newCommand(
             {cmd: 'cmd ?(.*)',
              fromMe: td,
              dontAddCommandList: true},
              (async (message, match) => {

        var CMD_HELP = '';
        if (match[1] === '') {
            WhatsAlexa.commands.map(
                async (command) =>  {
                    if (command.dontAddCommandList || command.cmd === undefined) return;
                    try {
                        var match = command.cmd.toString().match(/(\W*)([A-Za-zƒü√º≈üi√∂√ß1234567890]*)/);
                    } catch {
                        var match = [command.cmd];
                    }
    
                    var HANDLER = '';
    
                    if (/\[(\W*)\]/.test(Config.HANDLERS)) {
                        HANDLER = Config.HANDLERS.match(/\[(\W*)\]/)[1][0];
                    } else {
                        HANDLER = '.';
                    }
                    CMD_HELP += '*üéØ ' + Lang.COMMAND + ':* ```' + (match.length >= 3 ? (HANDLER + match[2]) : command.pattern) + (command.desc === '' ? '```\n\n' : '```\n');
                    if (command.desc !== '') CMD_HELP += '*üìù ' + Lang.DESC + ':* ```' + command.desc + (command.warn === '' ? '```\n\n' : '```\n');
                    if (command.usage !== '') CMD_HELP += '*‚å®Ô∏è ' + Lang.EXAMPLE + ':* ```' + command.usage + '```\n\n';
                    if (command.warn !== '') CMD_HELP += '*‚ö†Ô∏è ' + Lang.WARN + ':* ```' + command.warn + '```\n\n';

                }
            );
            
          await message.client.sendMessage(
                message.jid, MSG + CMD_HELP + FMSG, MessageType.text, {contextInfo: { forwardingScore: 49, isForwarded: true }, quoted: message.data});
        } else {

            var CMD_HELP = '';
            WhatsAlexa.commands.map(
                async (command) =>  {
                    if (command.dontAddCommandList || command.cmd === undefined) return;
                    try {
                        var cmatch = command.pattern.toString().match(/(\W*)([A-Za-zƒü√º≈üi√∂√ß1234567890]*)/);
                    } catch {
                        var cmatch = [command.cmd];
                    }
                
                    if (cmatch[2] == match[1]) {
                        var HANDLER = '';
    
                        if (/\[(\W*)\]/.test(Config.HANDLERS)) {
                            HANDLER = Config.HANDLERS.match(/\[(\W*)\]/)[1][0];
                        } else {
                            HANDLER = '.';
                        }
                        CMD_HELP += '*üéØ ' + Lang.COMMAND + ':* ```' + (cmatch.length >= 3 ? (HANDLER + cmatch[2]) : command.pattern) + (command.desc === '' ? '```\n\n' : '```\n');
                        if (command.desc !== '') CMD_HELP += '*üìù ' + Lang.DESC + ':* ```' + command.desc + (command.warn === '' ? '```\n\n' : '```\n');
                        if (command.usage !== '') CMD_HELP += '*‚å®Ô∏è ' + Lang.EXAMPLE + ':* ```' + command.usage + '```\n\n';
                        if (command.warn !== '') CMD_HELP += '*‚ö†Ô∏è ' + Lang.WARN + ':* ```' + command.warn + '```\n\n';

                    }
                }
            );
            if (CMD_HELP === '') CMD_HELP += Lang.NOT_FOUND;            
            await message.client.sendMessage(
                message.jid, MSG + CMD_HELP + FMSG, MessageType.text, {contextInfo: { forwardingScore: 49, isForwarded: true }, quoted: message.data});
        }
    }));
